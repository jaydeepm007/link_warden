"use strict";
(() => {
var exports = {};
exports.id = 5947;
exports.ids = [5947];
exports.modules = {

/***/ 3524:
/***/ ((module) => {

module.exports = require("@prisma/client");

/***/ }),

/***/ 7096:
/***/ ((module) => {

module.exports = require("bcrypt");

/***/ }),

/***/ 614:
/***/ ((module) => {

module.exports = require("next-auth/jwt");

/***/ }),

/***/ 6090:
/***/ ((module) => {

module.exports = import("stripe");;

/***/ }),

/***/ 8223:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Z: () => (/* binding */ getUsers)
/* harmony export */ });
/* harmony import */ var _lib_api_db__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3009);

async function getUsers() {
    // Get all users
    const users = await _lib_api_db__WEBPACK_IMPORTED_MODULE_0__/* .prisma */ ._.user.findMany({
        select: {
            id: true,
            username: true,
            email: true,
            emailVerified: true,
            subscriptions: {
                select: {
                    active: true
                }
            },
            createdAt: true
        }
    });
    return {
        response: users,
        status: 200
    };
}


/***/ }),

/***/ 5568:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {


// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  Z: () => (/* binding */ postUser)
});

// EXTERNAL MODULE: ./lib/api/db.ts
var db = __webpack_require__(3009);
// EXTERNAL MODULE: external "bcrypt"
var external_bcrypt_ = __webpack_require__(7096);
var external_bcrypt_default = /*#__PURE__*/__webpack_require__.n(external_bcrypt_);
// EXTERNAL MODULE: external "next-auth/jwt"
var jwt_ = __webpack_require__(614);
;// CONCATENATED MODULE: ./lib/api/isServerAdmin.ts


async function isServerAdmin({ req }) {
    const token = await (0,jwt_.getToken)({
        req
    });
    const userId = token?.id;
    if (!userId) {
        return false;
    }
    if (token.exp < Date.now() / 1000) {
        return false;
    }
    // check if token is revoked
    const revoked = await db/* prisma */._.accessToken.findFirst({
        where: {
            token: token.jti,
            revoked: true
        }
    });
    if (revoked) {
        return false;
    }
    const findUser = await db/* prisma */._.user.findFirst({
        where: {
            id: userId
        }
    });
    if (findUser?.id === Number( false || 1)) {
        return true;
    } else {
        return false;
    }
}

;// CONCATENATED MODULE: ./lib/api/controllers/users/postUser.ts



const emailEnabled = process.env.EMAIL_FROM && process.env.EMAIL_SERVER ? true : false;
const stripeEnabled = process.env.STRIPE_SECRET_KEY ? true : false;
async function postUser(req, res) {
    let isAdmin = await isServerAdmin({
        req
    });
    if (false) {}
    const body = req.body;
    const checkHasEmptyFields = emailEnabled ? !body.password || !body.name || !body.email : !body.username || !body.password || !body.name;
    if (!body.password || body.password.length < 8) return {
        response: "Password must be at least 8 characters.",
        status: 400
    };
    if (checkHasEmptyFields) return {
        response: "Please fill out all the fields.",
        status: 400
    };
    // Check email (if enabled)
    const checkEmail = /^(([^<>()[\]\.,;:\s@\"]+(\.[^<>()[\]\.,;:\s@\"]+)*)|(\".+\"))@(([^<>()[\]\.,;:\s@\"]+\.)+[^<>()[\]\.,;:\s@\"]{2,})$/i;
    if (emailEnabled && !checkEmail.test(body.email?.toLowerCase() || "")) return {
        response: "Please enter a valid email.",
        status: 400
    };
    // Check username (if email was disabled)
    const checkUsername = RegExp("^[a-z0-9_-]{3,31}$");
    const autoGeneratedUsername = "user" + Math.round(Math.random() * 1000000000);
    if (body.username && !checkUsername.test(body.username?.toLowerCase())) return {
        response: "Username has to be between 3-30 characters, no spaces and special characters are allowed.",
        status: 400
    };
    else if (!body.username) {
        body.username = autoGeneratedUsername;
    }
    const checkIfUserExists = await db/* prisma */._.user.findFirst({
        where: {
            OR: [
                {
                    email: body.email ? body.email.toLowerCase().trim() : undefined
                },
                {
                    username: body.username ? body.username.toLowerCase().trim() : undefined
                }
            ]
        }
    });
    if (!checkIfUserExists) {
        const autoGeneratedUsername = "user" + Math.round(Math.random() * 1000000000);
        const saltRounds = 10;
        const hashedPassword = external_bcrypt_default().hashSync(body.password, saltRounds);
        // Subscription dates
        const currentPeriodStart = new Date();
        const currentPeriodEnd = new Date();
        currentPeriodEnd.setFullYear(currentPeriodEnd.getFullYear() + 1000); // end date is in 1000 years...
        if (isAdmin) {
            const user = await db/* prisma */._.user.create({
                data: {
                    name: body.name,
                    username: emailEnabled ? body.username.toLowerCase().trim() || autoGeneratedUsername : body.username.toLowerCase().trim(),
                    email: emailEnabled ? body.email?.toLowerCase().trim() : undefined,
                    password: hashedPassword,
                    emailVerified: new Date(),
                    subscriptions: stripeEnabled ? {
                        create: {
                            stripeSubscriptionId: "fake_sub_" + Math.round(Math.random() * 10000000000000),
                            active: true,
                            currentPeriodStart,
                            currentPeriodEnd
                        }
                    } : undefined
                },
                select: {
                    id: true,
                    username: true,
                    email: true,
                    emailVerified: true,
                    subscriptions: {
                        select: {
                            active: true
                        }
                    },
                    createdAt: true
                }
            });
            return {
                response: user,
                status: 201
            };
        } else {
            await db/* prisma */._.user.create({
                data: {
                    name: body.name,
                    username: emailEnabled ? autoGeneratedUsername : body.username.toLowerCase().trim(),
                    email: emailEnabled ? body.email?.toLowerCase().trim() : undefined,
                    password: hashedPassword
                }
            });
            return {
                response: "User successfully created.",
                status: 201
            };
        }
    } else {
        return {
            response: "Email or Username already exists.",
            status: 400
        };
    }
}


/***/ }),

/***/ 358:
/***/ ((module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ users)
/* harmony export */ });
/* harmony import */ var _lib_api_controllers_users_postUser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5568);
/* harmony import */ var _lib_api_controllers_users_getUsers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(8223);
/* harmony import */ var _lib_api_verifyUser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(8005);
var __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_lib_api_verifyUser__WEBPACK_IMPORTED_MODULE_2__]);
_lib_api_verifyUser__WEBPACK_IMPORTED_MODULE_2__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];



async function users(req, res) {
    if (req.method === "POST") {
        if (false) {}
        const response = await (0,_lib_api_controllers_users_postUser__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(req, res);
        return res.status(response.status).json({
            response: response.response
        });
    } else if (req.method === "GET") {
        const user = await (0,_lib_api_verifyUser__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)({
            req,
            res
        });
        if (!user || user.id !== Number( false || 1)) return res.status(401).json({
            response: "Unauthorized..."
        });
        const response = await (0,_lib_api_controllers_users_getUsers__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z)();
        return res.status(response.status).json({
            response: response.response
        });
    }
}

__webpack_async_result__();
} catch(e) { __webpack_async_result__(e); } });

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, [5746,8005], () => (__webpack_exec__(358)));
module.exports = __webpack_exports__;

})();